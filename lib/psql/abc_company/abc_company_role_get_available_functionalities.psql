/**
 * Selects all functionalities of all modules granted to a company including a flag indication the functionality
 * is granted to a role.
 *
 * @param p_cmp_id The ID of the company.
 * @param p_rol_id The ID of the role.
 * @param p_lan_id The ID of the language for linguistic entities.
 *
 * @type rows
 */
create procedure abc_company_role_get_available_functionalities
(
  in p_cmp_id smallint(5) unsigned, -- type: ABC_AUTH_COMPANY.cmp_id
  in p_rol_id smallint(5) unsigned, -- type: ABC_AUTH_ROLE.rol_id
  in p_lan_id tinyint(3) unsigned --   type: ABC_BABEL_LANGUAGE.lan_id
)
  reads sql data
begin
  select mdl.mdl_id
       , wd1.wdt_text                     as mdl_name

       , fun.fun_id
       , wd2.wdt_text                     as fun_name
       , if(arf.fun_id is not null, 1, 0) as fun_enabled
  from ABC_AUTH_MODULE_COMPANY     amc
  join      ABC_AUTH_MODULE        mdl on mdl.mdl_id = amc.mdl_id
  join      ABC_BABEL_WORD_TEXT    wd1 on wd1.wrd_id = mdl.wrd_id and --
                                          wd1.lan_id = p_lan_id
  join      ABC_AUTH_FUNCTIONALITY fun on fun.mdl_id = mdl.mdl_id
  join      ABC_BABEL_WORD_TEXT    wd2 on wd2.wrd_id = fun.wrd_id and --
                                          wd2.lan_id = p_lan_id
  left join ABC_AUTH_ROL_FUN       arf on arf.fun_id = fun.fun_id and --
                                          arf.rol_id = p_rol_id and --
                                          arf.cmp_id = p_cmp_id
  where amc.cmp_id = p_cmp_id
  order by mdl_name
         , fun_name;
end
